class CompaniesController < AccountController
  
  before_filter :valida_admin
  
  before_filter :my_company, :except => [:index, :new, :create]

  def authorize
    oauth              = @company.oauth
    session['rtoken']  = oauth.request_token.token
    session['rsecret'] = oauth.request_token.secret
    redirect_to oauth.request_token.authorize_url
  end
  
  def index
    adios and return if !@this_user.is_god?
    conditions = ''
    conditions = ['companies.nombre_fiscal like ? or companies.nombre_comercial like ?', "%#{params[:company_name]}%", "%#{params[:company_name]}%"]
    @companies = Company.paginate(
      :conditions => conditions, 
      :page => params[:page], 
      :include => :plan, 
      :order => 'companies.created_at desc')

    respond_to do |format|
      format.html # index.html.erb
    end
  end
  
  def show
    my_company
    
    @offices = @company.offices
      
    respond_to do |format|
      format.html # show.html.erb
    end
  end

  def new
    adios and return if !@this_user.is_god?
    if (params[:mensaje] and (params[:mensaje].to_i == 1))
      Agent.update_all("display_message = 1")
      notice_stickie("Agentes actualizados correctamente.")
      redirect_to(admin_url) and return
    else
      @company = Company.new
    end

    respond_to do |format|
      format.html # new.html.erb
    end
  end
  
  def edit
    my_company
  end

  def export
    @prop_images = @company.properties.find(:all, :include => :images)
    @comm_images = @company.communities.find(:all, :include => :photos)
  end

  def create
    adios and return if !@this_user.is_god?
    @company         = Company.new(params[:company])

    respond_to do |format|
      if @company.save
        @company.update_attribute('cod_inmo', @company.id)
        notice_stickie("#{@company.nombre_comercial} creada correctamente.")
        #enviamos un email con los datos de acceso al usuario
        CompanyMailer.deliver_nuevaempresa(@company, @company.agents.find(:first))
        format.html { redirect_to(company_url(@company)) }
      else
        format.html { render :action => "new" }
      end
    end
  end

  def twitter
    
  end

  def update
    my_company

    save_twitter_auth if params[:pin] and (params[:pin].to_s.size > 2)
    
    if (params[:new_plan])
      if ((params[:new_plan].to_i > 1) and (params[:company][:bank_account].size != 20))
        error_stickie('El n&#250;mero de cuenta es incorrecto.  Revisalo, por favor.')
        redirect_to update_company_path(@company, :new_plan => params[:new_plan].to_i) and return
      end
      
    end

    respond_to do |format|
      if @company.update_attributes(params[:company])
        if (params[:new_plan]) 
          if (new_plan = Plan.find(params[:new_plan]))
            old_plan      = @company.plan_id
            @company.plan = new_plan
            @company.save!
            update_payments(new_plan.id, old_plan)
          else
            error_stickie('El nuevo plan no es correcto.  Intentalo de nuevo')
            redirect_to service_company_path(@company)
          end
        end
          
        notice_stickie("Datos de #{@company.nombre_comercial} actualizados correctamente.")
        format.html { redirect_to(company_url(@company)) }
      else
        format.html { render :action => "edit" }
      end
    end
  end
  
  def destroy
    adios and return if !@this_user.is_god?
    
    my_company
    my_company.destroy
  
    respond_to do |format|
      format.html { redirect_to(companies_url) }
    end
  end
  
  def service
    
  end
  
  def upgrade
    redirect_to admin_path and return if !params[:new_plan]
    
    @new_plan = Plan.find(params[:new_plan].to_i)
  rescue
    error_stickie('Ha ocurrido un error al actualizar tu cuenta.')
    redirect_to admin_path and return
  end
  
  protected
  
  #este mantenimiento solo es accesible por dios o por el administrador para su propia empresa
  def valida_admin
    adios and return if (!valida_permiso(11))
  end
  
  def my_company
    if @this_user.is_god?
      @company = Company.find(params[:id])
    end
  end
  
  def update_payments(new_plan, old_plan)
    if (new_plan.to_i == 1)
      PlanPayment.delete_all(["company_id=? and due_on >= ?", @company.id, DateTime.now])
    else
      if (old_plan.to_i == 1)
        #new payment due for tomorrow
        next_payment         = @company.plan_payments.new
        next_payment.plan_id = @company.plan_id
        next_payment.due_on  = 1.day.from_now 
        next_payment.ammount = @company.plan.price
        next_payment.save  
      else
        #if there are pending payments update it to reflect new prices
        next_payment         = @company.plan_payments.find(:first, :conditions => ["due_on >= ?", DateTime.now])
        if next_payment
          next_payment.plan_id = @company.plan_id
          next_payment.due_on  = 31.day.from_now 
          next_payment.ammount = @company.plan.price
          next_payment.save
        end
      end
    end
  end

  def save_twitter_auth
    oauth = @company.oauth
    oauth.authorize_from_request(session['rtoken'], session['rsecret'], params[:pin])
    session['rtoken']  = nil
    session['rsecret'] = nil

    @company.update_attributes({
      :twitter_token => oauth.access_token.token,
      :twitter_secret => oauth.access_token.secret,
    })
  end
  
end
