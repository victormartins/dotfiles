{"version":1,"windowDimensions":{"x":0,"y":23,"width":2560,"height":1417,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/victor.martins/Temp/sage_one_gac_uki"],"buffers":[{"id":"95e9a6beb49bad6d4910fd878d75cbcf","text":"namespace :data_fixes do\n  namespace :uk do\n\n    desc \"Updates Sage Pay Credentials\"\n    task :update_sage_pay_creds, [:csv_file] => :environment do |t, args|\n      p \"START: Updating Sage Pay Credentials\"\n\n      csv_file = args[:csv_file] || 'fixtures/sage_pay_creds.csv'\n      cwd = File.expand_path File.dirname(__FILE__)\n      csv_abs = File.join(cwd, csv_file)\n      fail \"File #{csv_abs} does not exist\" unless File.exists?(csv_abs)\n\n      CSV.foreach(csv_abs) do |row|\n        begin\n          vendor_name = row[0]\n          user_name = row[1]\n          password = row[2]\n\n          credential_records = AdvancedUk::SagePayVendor.where(\"vendor_name = ? AND user_name = ?\", vendor_name, user_name)\n\n          if credential_records.present?\n            puts \"Updating #{credential_records.count} record(s) for vendor_name #{vendor_name} user_name #{user_name}\"\n\n            credential_records.each do |credentials_record|\n              credentials_record.password = password\n              credentials_record.save!\n            end\n          else\n            raise \"AdvancedUk::SagePayVendor not found\"\n          end\n        rescue Exception => e\n          puts \"ERROR: Unable to update AdvancedUk::SagePayVendor for vendor_name #{vendor_name} user_name #{user_name}\"\n          puts \"ERROR_DETAIL: #{e}\"\n        end\n      end\n      p \"COMPLETE: Updating Sage Pay Credentials\"\n    end\n\n    desc 'Sets accounting_type for exisiting businesses'\n    task :set_accounting_type => :environment do\n      puts 'Setting accounting type to accrual'\n      sql_to_execute= <<-EOS\n        UPDATE financial_settings SET accounting_type = 'accrual';\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql_to_execute)\n\n      puts \"Complete\"\n    end\n\n    desc 'Sets last_used_cash_value to zero for exisiting businesses'\n    task :set_last_used_cash_value => :environment do\n      puts 'Setting last_used_cash_value to zero'\n      sql_to_execute= <<-EOS\n        UPDATE transaction_sequences SET last_used_cash_value = 0;\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql_to_execute)\n\n      puts \"Complete\"\n    end\n\n    desc 'Removes service subscription records not needed'\n    task :remove_redundant_service_sub_records => :environment do\n      puts 'Remove redundant records from sop_settings_service_subscriptions'\n      sql_to_execute= <<-EOS\n        DELETE FROM sop_settings_service_subscriptions WHERE service_uid = 'sage_one_advanced';\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql_to_execute)\n\n      puts \"Complete\"\n    end\n\n    desc 'Add Single Tax Rate inheritance tags to UK/IE no tax and exempt tax rates '\n    task :add_sti_tags_to_ukie_tax_rates => :environment do\n      puts 'Adding Single Table Inheritence tags to seeded tax rates'\n\n      sql = <<-EOS\n      UPDATE tax_rates SET type = \"CoreAccounting::Taxes::Models::NoTaxRate\" WHERE name = \"NO_TAX\";\n      UPDATE tax_rates SET type = \"CoreAccounting::Taxes::Models::ExemptTaxRate\" WHERE name = \"EXEMPT\";\n      UPDATE tax_rates SET type = \"CoreAccounting::Taxes::Models::NoTaxRate\" WHERE name = \"IRISH_NO_TAX\";\n      UPDATE tax_rates SET type = \"CoreAccounting::Taxes::Models::ExemptTaxRate\" WHERE name = \"IRISH_EXEMPT\";\n      EOS\n\n      sql.strip.split(';').each do |sql|\n        ActiveRecord::Base.connection.execute(sql)\n      end\n\n      puts 'Complete'\n    end\n\n    desc 'Add the ZeroTaxRate type and make sure that each tax rate has at least the generic type. Make sure all tax rates have a type'\n    task :add_zero_tax_rate => :environment do\n      puts 'Adding the ZeroTaxRate to seeded tax rates'\n\n      sql = <<-EOS\n      UPDATE tax_rates SET type = \"CoreAccounting::Taxes::Models::ZeroTaxRate\" WHERE name = \"ZERO\";\n      UPDATE tax_rates SET type = \"CoreAccounting::Taxes::Models::ZeroTaxRate\" WHERE name = \"IRISH_ZERO\";\n      UPDATE tax_rates SET TYPE = \"CoreAccounting::Taxes::Models::TaxRate\" WHERE TYPE IS NULL;\n      UPDATE tax_rate_percentages SET tax_rate_type = \"CoreAccounting::Taxes::Models::BaseTaxRate\"\n      UPDATE tax_rates SET is_system = '1';\n      EOS\n\n      sql.strip.split(';').each do |sql|\n        ActiveRecord::Base.connection.execute(sql)\n      end\n\n      puts 'Complete'\n    end\n\n\n    desc 'Delete ledger entries which reverse the original posted ledger entries and are causing errors on the aged reports'\n    task :delete_reversed_ledger_entries, [:business_id, :transaction_id] => :environment do |t, args|\n      puts \"Deleting reversed ledger entries for business #{args.business_id} and transaction #{args.transaction_id}\"\n      sql = <<-EOS\n        DELETE FROM ledger_entries\n        WHERE   business_id = #{args.business_id}\n        AND     transaction_id = #{args.transaction_id}\n        AND     created_at > (\n          SELECT created_at\n          FROM (\n            SELECT  MIN(created_at) AS created_at\n            FROM    ledger_entries\n            WHERE   business_id = #{args.business_id}\n            AND     transaction_id = #{args.transaction_id}\n          ) as le\n        )\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql)\n      puts 'Complete'\n    end\n\n    desc 'Reverses the debits and credits for reconciled purchase batch entries which incorrectly debit/credit the Trade Creditors account'\n    task :reconciled_purchase_batch_entries_which_incorrectly_debit_or_credit_trade_creditors, [:business_id] => :environment do |t, args|\n      puts \"Reversing incorrect purchase batch entries for business ID: #{args.business_id}\"\n\n      sql_invoices = <<-EOS\nUPDATE ledger_entries le\nINNER JOIN (\n  SELECT DISTINCT(le.transaction_id)\n  FROM\n    ledger_entries le\n  INNER JOIN (\n    SELECT\n      le.transaction_id\n    FROM\n      ledger_entries le\n    INNER JOIN ledger_accounts la ON le.ledger_account_id = la.id\n    AND la.coa_account_id IN (23, 94) /* trade creditors */\n    INNER JOIN transactions t ON le.transaction_id = t.id\n    AND t.transaction_type_id = 15 /* invoices */\n    AND t.is_corrected = 0\n    WHERE\n      le.business_id = #{args.business_id} AND le.dr > 0\n  ) AS bad_creditors ON le.transaction_id = bad_creditors.transaction_id\n  AND (tax_return_id IS NOT NULL\n  OR bank_reconciliation_id IS NOT NULL)\n) AS reconciled ON le.transaction_id = reconciled.transaction_id\nSET\n  dr = cr,\n  cr = dr\n      EOS\n\n      sql_credit_notes = <<-EOS\nUPDATE ledger_entries le\nINNER JOIN (\n  SELECT DISTINCT(le.transaction_id)\n  FROM\n    ledger_entries le\n  INNER JOIN (\n    SELECT\n      le.transaction_id\n    FROM\n      ledger_entries le\n    INNER JOIN ledger_accounts la ON le.ledger_account_id = la.id\n    AND la.coa_account_id IN (23, 94) /* trade creditors */\n    INNER JOIN transactions t ON le.transaction_id = t.id\n    AND t.transaction_type_id = 14 /* credit notes */\n    AND t.is_corrected = 0\n    WHERE\n      le.business_id = #{args.business_id} AND le.cr > 0\n  ) AS bad_creditors ON le.transaction_id = bad_creditors.transaction_id\n  AND (tax_return_id IS NOT NULL\n  OR bank_reconciliation_id IS NOT NULL)\n) AS reconciled ON le.transaction_id = reconciled.transaction_id\nSET\n  dr = cr,\n  cr = dr\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql_invoices)\n      ActiveRecord::Base.connection.execute(sql_credit_notes)\n      puts 'Complete'\n    end\n\n    desc 'Changes the status of a VAT return from waiting'\n    task :change_vat_return_status_from_waiting, [:business_id] => :environment do |t, args|\n      puts \"Changing the status of vat return for business_id: #{args.business_id}\"\n\n      sql = <<-EOS\n          UPDATE tax_returns\n          SET tax_return_status_id = 3\n          WHERE tax_return_status_id = 1\n          AND business_id = #{args.business_id};\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql)\n      puts 'Complete'\n    end\n\n    desc 'Changes the status of a VAT return from waiting to user input status'\n    task :change_vat_return_status_from_waiting_to_user_input_status, [:business_id] => :environment do |t, args|\n      puts \"Changing the status of vat return for business_id: #{args.business_id}\"\n\n      puts \"Here is the list of vat return statuses and their corresponding numbers..\"\n      puts \"2 : SUBMITTED_ONLINE\"\n      puts \"3 : SUBMITTED_MANUALLY\"\n      puts \"4 : SUBMISSION_FAILED\"\n      puts \"5 : DRAFT\"\n\n      puts \"Please type in the number of the status you would like it changed to and press ENTER\"\n\n      new_status = STDIN.gets.chomp\n      input_status = new_status.to_i\n\n      sql = <<-EOS\n          UPDATE tax_returns\n          SET tax_return_status_id = #{input_status}\n          WHERE tax_return_status_id = 1\n          AND business_id = #{args.business_id};\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql)\n      puts 'Complete'\n    end\n\n    desc 'Cleans up standard after migration, preparing user for access'\n    task :run_migration_cleanup, [:guid] => :environment do |t, args|\n      puts \"Cleaning up migration\"\n\n      sql = <<-EOS\n        CALL CleanUpDataFromStandard('#{args.guid}');\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql)\n      puts 'Clean-up complete'\n    end\n\n    desc 'Updates the Jobs for Currencies for the new namespace'\n    task :update_currencies_jobs_namespace => :environment do\n      puts \"Updating Jobs\"\n\n      sql = <<-EOS\n        UPDATE delayed_jobs set handler = REPLACE(handler,'AdvancedUk::Jobs::UpdateCurrencyRatesJob', 'Currencies::Jobs::UpdateCurrencyRatesJob')\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql)\n      puts 'Updating complete'\n    end\n\n    desc 'Ensure line items with product or service id also have catalog item id'\n    task :copy_line_item_catalog_ids => :environment do\n      puts 'Copying catalog IDs for line items'\n\n      sql = <<-EOS\n        UPDATE artefact_line_items SET catalog_item_id = IF(product_id IS NULL, service_id, product_id)\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql)\n      puts 'Copy complete'\n    end\n\n    desc 'Update UK tax scheme displaying order'\n    task :update_tax_scheme_order => :environment do\n      puts 'Updating UK tax scheme order'\n\n      { 10 => :not_registered,\n        20 => :standard,\n        30 => :cash_accounting,\n        40 => :flat_invoice,\n        50 => :flat_cash,\n        60 => :irish_not_registered,\n        70 => :irish_standard,\n        80 => :irish_cash_accounting }.each { |key, value|\n          tax_scheme = FujiCoreAccounting::TaxScheme.send(value)\n          FujiSupport::LocalisedLookupData.\n            where(:table_name => :tax_schemes, :foreign_id => tax_scheme.id).each { |localised|\n            localised.order = key\n            localised.save!\n          }\n        }\n\n      puts 'Update UK tax scheme order complete'\n    end\n\n    desc 'Updates remote reports which failed to export'\n    task :update_remote_reports => :environment do\n      puts \"Updating Remote Reports\"\n\n      sql = <<-EOS\n        UPDATE remote_reports\n        SET updated_at = started_at + 1\n        WHERE updated_at = started_at;\n      EOS\n\n      ActiveRecord::Base.connection.execute(sql)\n      puts 'Updating complete'\n    end\n\n    desc 'Update tax rates scope_id'\n    task :update_tax_rates_scope_id => :environment do\n      puts \"Start - Update tax rates scope_id\"\n\n      sql = <<-EOS\n      UPDATE tax_rates t1, (SELECT t3.id, CONCAT(t4.code, \":\", t3.scope_id) AS new_scope_id FROM tax_rates t3, countries t4 WHERE t4.id = t3.scope_id) t2\n      SET t1.scope_id = t2.new_scope_id WHERE t1.id = t2.id;\n      EOS\n\n      begin\n        ActiveRecord::Base.connection.execute(sql)\n        puts \"Update tax rates scope_id complete...\"\n      rescue Exception => e\n        puts \"ERR!!!!: #{e}\"\n      end\n    end\n  end\nend\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":97,"column":0},"end":{"row":102,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":24,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"2":{"1":{"range":[[99,91],[99,91]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"1":{"range":[[99,91],[99,91]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[99,89],[99,90]],"newRange":[[99,89],[99,89]],"oldText":"\"","newText":""}},{"type":"change","content":{"oldRange":[[99,88],[99,89]],"newRange":[[99,88],[99,88]],"oldText":"\"","newText":""}},{"type":"change","content":{"oldRange":[[99,88],[99,88]],"newRange":[[99,88],[99,89]],"oldText":"","newText":"N"}},{"type":"change","content":{"oldRange":[[99,89],[99,89]],"newRange":[[99,89],[99,90]],"oldText":"","newText":"U"}},{"type":"change","content":{"oldRange":[[99,90],[99,90]],"newRange":[[99,90],[99,91]],"oldText":"","newText":"L"}},{"type":"change","content":{"oldRange":[[99,91],[99,91]],"newRange":[[99,91],[99,92]],"oldText":"","newText":"L"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[99,92],[99,92]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"checkpoint","id":11,"snapshot":{"2":{"1":{"range":[[99,91],[99,91]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"1":{"range":[[99,91],[99,91]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[99,6],[99,93]],"newRange":[[99,6],[99,95]],"oldText":"UPDATE tax_rates SET type = \"CoreAccounting::Taxes::Models::TaxRate\" WHERE type = NULL;","newText":"UPDATE tax_rates SET TYPE = \"CoreAccounting::Taxes::Models::TaxRate\" WHERE TYPE IS NULL; "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[99,95],[99,95]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[99,92],[99,92]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[99,94],[99,95]],"newRange":[[99,94],[99,94]],"oldText":" ","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[99,92],[99,92]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"checkpoint","id":16,"snapshot":{"2":{"1":{"range":[[99,94],[99,94]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"1":{"range":[[99,94],[99,94]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[99,94],[99,94]],"newRange":[[99,94],[100,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[100,0],[100,0]],"newRange":[[100,0],[100,6]],"oldText":"","newText":"      "}},{"type":"change","content":{"oldRange":[[100,6],[100,6]],"newRange":[[100,6],[100,98]],"oldText":"","newText":"UPDATE tax_rate_percentages SET tax_rate_type = \"CoreAccounting::Taxes::Models::BaseTaxRate\""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[100,98],[100,98]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/victor.martins/Temp/sage_one_gac_uki/lib/tasks/data_fixes.rake","digestWhenLastPersisted":"08b97cfc1704648b4c33b4fefecc9d083a209017","preferredLineEnding":null,"nextMarkerId":10,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":8,"softTabs":true,"firstVisibleScreenRow":69,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/victor.martins/Temp/sage_one_gac_uki/lib/tasks/data_fixes.rake","bufferId":"95e9a6beb49bad6d4910fd878d75cbcf","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/victor.martins/Temp/sage_one_gac_uki/lib/tasks/data_fixes.rake","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-ruby","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"fuzzy-finder":{"/Users/victor.martins/Temp/sage_one_gac_uki/lib/tasks/data_fixes.rake":1456333829706},"metrics":{"sessionLength":527432},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/victor.martins/Temp/sage_one_gac_uki":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"config":{"isExpanded":false,"entries":{}},"db":{"isExpanded":false,"entries":{}},"dev_keys":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":false,"entries":{}},"script":{"isExpanded":false,"entries":{}},"seeds":{"isExpanded":false,"entries":{}},"soroban":{"isExpanded":false,"entries":{}},"spec":{"isExpanded":false,"entries":{}},"testing":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/victor.martins/Temp/sage_one_gac_uki/lib","hasFocus":false,"attached":true,"scrollLeft":2,"scrollTop":0,"width":200}},"fullScreen":false}