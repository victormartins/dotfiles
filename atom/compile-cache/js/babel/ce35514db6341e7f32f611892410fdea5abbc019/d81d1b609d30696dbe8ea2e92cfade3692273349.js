var _templateObject = _taggedTemplateLiteral(['console.log("Hello World")\n          console.log(\'Hello World\')\n          console.log("Hello \'World\'")\n          console.log(\'Hello "World"\')\n          console.log(\'\')'], ['console.log("Hello World")\n          console.log(\'Hello World\')\n          console.log("Hello \'World\'")\n          console.log(\'Hello "World"\')\n          console.log(\'\')']),
    _templateObject2 = _taggedTemplateLiteral(['print(u"Hello World")\n          print(r\'\')'], ['print(u"Hello World")\n          print(r\'\')']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _libToggleQuotes = require('../lib/toggle-quotes');

var _libStringHelper = require('../lib/string-helper');

'use babel';

describe('ToggleQuotes', function () {
  beforeEach(function () {
    atom.config.set('toggle-quotes.quoteCharacters', '\'"');
  });

  describe('toggleQuotes(editor) js', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        return atom.packages.activatePackage('language-javascript');
      });

      waitsForPromise(function () {
        return atom.packages.activatePackage('language-json');
      });

      waitsForPromise(function () {
        return atom.workspace.open();
      });

      runs(function () {
        editor = atom.workspace.getActiveTextEditor();
        editor.setText((0, _libStringHelper.raw)(_templateObject));
        editor.setGrammar(atom.grammars.selectGrammar('test.js'));
      });
    });

    describe('when the cursor is not inside a quoted string', function () {
      it('does nothing', function () {
        expect(function () {
          return (0, _libToggleQuotes.toggleQuotes)(editor);
        }).not.toThrow();
      });
    });

    describe('when the cursor is inside an empty single quoted string', function () {
      it('switches the quotes to double', function () {
        editor.setCursorBufferPosition([4, 13]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(4)).toBe('console.log("")');
        expect(editor.getCursorBufferPosition()).toEqual([4, 13]);
      });
    });

    describe('when the cursor is inside a double quoted string', function () {
      describe('when using default config', function () {
        it('switches the double quotes to single quotes', function () {
          editor.setCursorBufferPosition([0, 16]);
          (0, _libToggleQuotes.toggleQuotes)(editor);
          expect(editor.lineTextForBufferRow(0)).toBe("console.log('Hello World')");
          expect(editor.getCursorBufferPosition()).toEqual([0, 16]);
        });
      });
    });

    describe('when using custom config of backticks', function () {
      it('switches the double quotes to backticks', function () {
        atom.config.set('toggle-quotes.quoteCharacters', '\'"`');
        editor.setCursorBufferPosition([0, 16]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(0)).toBe('console.log(`Hello World`)');
        expect(editor.getCursorBufferPosition()).toEqual([0, 16]);
      });
    });

    describe('when the cursor is inside a single quoted string', function () {
      it('switches the quotes to double', function () {
        editor.setCursorBufferPosition([1, 16]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(1)).toBe('console.log("Hello World")');
        expect(editor.getCursorBufferPosition()).toEqual([1, 16]);
      });
    });

    describe('when the cursor is inside a single-quoted string that is nested within a double quoted string', function () {
      it('switches the outer quotes to single and escapes the inner quotes', function () {
        editor.setCursorBufferPosition([2, 22]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(2)).toBe("console.log('Hello \\'World\\'')");
        expect(editor.getCursorBufferPosition()).toEqual([2, 22]);

        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(2)).toBe('console.log("Hello \'World\'")');
      });
    });

    describe('when the cursor is inside a double-quoted string that is nested within a single quoted string', function () {
      it('switches the outer quotes to double and escapes the inner quotes', function () {
        editor.setCursorBufferPosition([3, 22]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(3)).toBe('console.log("Hello \\"World\\"")');
        expect(editor.getCursorBufferPosition()).toEqual([3, 22]);

        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(3)).toBe("console.log('Hello \"World\"')");
      });
    });

    describe('when the cursor is inside multiple quoted strings', function () {
      it('switches the quotes of both quoted strings separately and leaves the cursors where they were, and does so atomically', function () {
        editor.setCursorBufferPosition([0, 16]);
        editor.addCursorAtBufferPosition([1, 16]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(0)).toBe("console.log('Hello World')");
        expect(editor.lineTextForBufferRow(1)).toBe('console.log("Hello World")');
        expect(editor.getCursors()[0].getBufferPosition()).toEqual([0, 16]);
        expect(editor.getCursors()[1].getBufferPosition()).toEqual([1, 16]);

        editor.undo();
        expect(editor.lineTextForBufferRow(0)).toBe('console.log("Hello World")');
        expect(editor.lineTextForBufferRow(1)).toBe("console.log('Hello World')");
        expect(editor.getCursors()[0].getBufferPosition()).toEqual([0, 16]);
        expect(editor.getCursors()[1].getBufferPosition()).toEqual([1, 16]);
      });
    });

    describe('when the cursor is on an invalid region', function () {
      describe('when it is quoted', function () {
        it('toggles the quotes', function () {
          editor.setGrammar(atom.grammars.selectGrammar('test.json'));
          editor.setText("{'invalid': true}");
          editor.setCursorBufferPosition([0, 4]);
          (0, _libToggleQuotes.toggleQuotes)(editor);
          expect(editor.getText()).toBe('{"invalid": true}');
        });
      });

      describe('when it is not quoted', function () {
        it('does not toggle the quotes', function () {
          editor.setGrammar(atom.grammars.selectGrammar('test.json'));
          editor.setText('{invalid: true}');
          editor.setCursorBufferPosition([0, 4]);
          (0, _libToggleQuotes.toggleQuotes)(editor);
          expect(editor.getText()).toBe('{invalid: true}');
        });
      });
    });
  });

  describe('toggleQuotes(editor) python', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        return atom.packages.activatePackage('language-python');
      });

      waitsForPromise(function () {
        return atom.workspace.open();
      });

      runs(function () {
        editor = atom.workspace.getActiveTextEditor();
        editor.setText((0, _libStringHelper.raw)(_templateObject2));
        editor.setGrammar(atom.grammars.selectGrammar('test.py'));
      });
    });

    describe('when cursor is inside a double quoted unicode string', function () {
      it('switches quotes to single excluding unicode character', function () {
        editor.setCursorBufferPosition([0, 16]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(0)).toBe("print(u'Hello World')");
        expect(editor.getCursorBufferPosition()).toEqual([0, 16]);
      });
    });

    describe('when cursor is inside an empty single quoted raw string', function () {
      it('switches quotes to double', function () {
        editor.setCursorBufferPosition([1, 8]);
        (0, _libToggleQuotes.toggleQuotes)(editor);
        expect(editor.lineTextForBufferRow(1)).toBe('print(r"")');
        expect(editor.getCursorBufferPosition()).toEqual([1, 8]);
      });
    });
  });

  it('activates when a command is triggered', function () {
    var activatePromise = atom.packages.activatePackage('toggle-quotes');

    waitsForPromise(function () {
      return atom.workspace.open();
    });

    runs(function () {
      var editor = atom.workspace.getActiveTextEditor();
      atom.commands.dispatch(atom.views.getView(editor), 'toggle-quotes:toggle');
    });

    waitsForPromise(function () {
      return activatePromise;
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/victor.martins/.atom/packages/toggle-quotes/spec/toggle-quotes-spec.js
