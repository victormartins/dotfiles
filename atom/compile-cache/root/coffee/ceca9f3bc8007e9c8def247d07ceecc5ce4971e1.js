(function() {
  var CompositeDisposable;

  CompositeDisposable = require("atom").CompositeDisposable;

  module.exports = {
    subscriptions: null,
    conf: [],
    golden_ratio_conjugate: 0.618033988749895,
    init: function() {
      return this.initConfigSubscribers();
    },
    disable: function() {
      var ref;
      return (ref = this.subscriptions) != null ? ref.dispose() : void 0;
    },
    observe: function(key) {
      return this.subscriptions.add(atom.config.observe("activate-power-mode.particles.colours." + key, (function(_this) {
        return function(value) {
          return _this.conf[key] = value;
        };
      })(this)));
    },
    initConfigSubscribers: function() {
      this.subscriptions = new CompositeDisposable;
      this.observe('type');
      return this.observe('fixed');
    },
    hsvToRgb: function(h, s, v) {
      var c, h2, h3, m, x;
      c = v * s;
      h2 = (360.0 * h) / 60.0;
      h3 = Math.abs((h2 % 2) - 1.0);
      x = c * (1.0 - h3);
      m = v - c;
      if ((0 <= h2 && h2 < 1)) {
        return [c + m, x + m, m];
      }
      if ((1 <= h2 && h2 < 2)) {
        return [x + m, c + m, m];
      }
      if ((2 <= h2 && h2 < 3)) {
        return [m, c + m, x + m];
      }
      if ((3 <= h2 && h2 < 4)) {
        return [m, x + m, c + m];
      }
      if ((4 <= h2 && h2 < 5)) {
        return [x + m, m, c + m];
      }
      if ((5 <= h2 && h2 < 6)) {
        return [c + m, m, x + m];
      }
    },
    getFixedColorGenerator: function*() {
      var c, color;
      c = this.conf['fixed'];
      color = "rgb(" + c.red + "," + c.green + "," + c.blue + ")";
      while (true) {
        yield color;
      }
    },
    getRandomGenerator: function*() {
      var b, g, r, rgb, seed;
      seed = Math.random();
      while (true) {
        seed += this.golden_ratio_conjugate;
        seed = seed - (Math.floor(seed / 1));
        rgb = this.hsvToRgb(seed, 1, 1);
        r = Math.floor((rgb[0] * 255) / 1);
        g = Math.floor((rgb[1] * 255) / 1);
        b = Math.floor((rgb[2] * 255) / 1);
        yield ("rgb(" + r + "," + g + "," + b + ")");
      }
    },
    getColorAtCursorGenerator: function*(cursor, editorElement) {
      var color;
      color = this.getColorAtCursor(cursor, editorElement);
      while (true) {
        yield color;
      }
    },
    getColorAtCursor: function(cursor, editorElement) {
      var el, error, scope;
      scope = cursor.getScopeDescriptor();
      scope = scope.toString().replace(/\./g, '.syntax--');
      try {
        el = editorElement.querySelector(scope);
      } catch (error1) {
        error = error1;
        "rgb(255, 255, 255)";
      }
      if (el) {
        return getComputedStyle(el).color;
      } else {
        return "rgb(255, 255, 255)";
      }
    },
    generateColors: function(cursor, editorElement) {
      var colorType;
      colorType = this.conf['type'];
      if (colorType === 'random') {
        return this.getRandomGenerator();
      } else if (colorType === 'fixed') {
        return this.getFixedColorGenerator();
      } else {
        return this.getColorAtCursorGenerator(cursor, editorElement);
      }
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3Rvci5tYXJ0aW5zL2RvdGZpbGVzL2F0b20vcGFja2FnZXMvYWN0aXZhdGUtcG93ZXItbW9kZS9saWIvY29sb3ItaGVscGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUMsc0JBQXVCLE9BQUEsQ0FBUSxNQUFSOztFQUV4QixNQUFNLENBQUMsT0FBUCxHQUNFO0lBQUEsYUFBQSxFQUFlLElBQWY7SUFDQSxJQUFBLEVBQU0sRUFETjtJQUVBLHNCQUFBLEVBQXdCLGlCQUZ4QjtJQUlBLElBQUEsRUFBTSxTQUFBO2FBQ0osSUFBQyxDQUFBLHFCQUFELENBQUE7SUFESSxDQUpOO0lBT0EsT0FBQSxFQUFTLFNBQUE7QUFDUCxVQUFBO3FEQUFjLENBQUUsT0FBaEIsQ0FBQTtJQURPLENBUFQ7SUFVQSxPQUFBLEVBQVMsU0FBQyxHQUFEO2FBQ1AsSUFBQyxDQUFBLGFBQWEsQ0FBQyxHQUFmLENBQW1CLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBWixDQUNqQix3Q0FBQSxHQUF5QyxHQUR4QixFQUMrQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsS0FBRDtpQkFDOUMsS0FBQyxDQUFBLElBQUssQ0FBQSxHQUFBLENBQU4sR0FBYTtRQURpQztNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FEL0IsQ0FBbkI7SUFETyxDQVZUO0lBZ0JBLHFCQUFBLEVBQXVCLFNBQUE7TUFDckIsSUFBQyxDQUFBLGFBQUQsR0FBaUIsSUFBSTtNQUNyQixJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQ7YUFDQSxJQUFDLENBQUEsT0FBRCxDQUFTLE9BQVQ7SUFIcUIsQ0FoQnZCO0lBcUJBLFFBQUEsRUFBVSxTQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTDtBQUNSLFVBQUE7TUFBQSxDQUFBLEdBQUksQ0FBQSxHQUFJO01BQ1IsRUFBQSxHQUFLLENBQUMsS0FBQSxHQUFNLENBQVAsQ0FBQSxHQUFXO01BQ2hCLEVBQUEsR0FBSyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsRUFBQSxHQUFHLENBQUosQ0FBQSxHQUFTLEdBQWxCO01BQ0wsQ0FBQSxHQUFJLENBQUEsR0FBSSxDQUFDLEdBQUEsR0FBTSxFQUFQO01BQ1IsQ0FBQSxHQUFJLENBQUEsR0FBSTtNQUNSLElBQUcsQ0FBQSxDQUFBLElBQUcsRUFBSCxJQUFHLEVBQUgsR0FBTSxDQUFOLENBQUg7QUFBZ0IsZUFBTyxDQUFDLENBQUEsR0FBRSxDQUFILEVBQUssQ0FBQSxHQUFFLENBQVAsRUFBUyxDQUFULEVBQXZCOztNQUNBLElBQUcsQ0FBQSxDQUFBLElBQUcsRUFBSCxJQUFHLEVBQUgsR0FBTSxDQUFOLENBQUg7QUFBZ0IsZUFBTyxDQUFDLENBQUEsR0FBRSxDQUFILEVBQUssQ0FBQSxHQUFFLENBQVAsRUFBUyxDQUFULEVBQXZCOztNQUNBLElBQUcsQ0FBQSxDQUFBLElBQUcsRUFBSCxJQUFHLEVBQUgsR0FBTSxDQUFOLENBQUg7QUFBZ0IsZUFBTyxDQUFDLENBQUQsRUFBRyxDQUFBLEdBQUUsQ0FBTCxFQUFPLENBQUEsR0FBRSxDQUFULEVBQXZCOztNQUNBLElBQUcsQ0FBQSxDQUFBLElBQUcsRUFBSCxJQUFHLEVBQUgsR0FBTSxDQUFOLENBQUg7QUFBZ0IsZUFBTyxDQUFDLENBQUQsRUFBRyxDQUFBLEdBQUUsQ0FBTCxFQUFPLENBQUEsR0FBRSxDQUFULEVBQXZCOztNQUNBLElBQUcsQ0FBQSxDQUFBLElBQUcsRUFBSCxJQUFHLEVBQUgsR0FBTSxDQUFOLENBQUg7QUFBZ0IsZUFBTyxDQUFDLENBQUEsR0FBRSxDQUFILEVBQUssQ0FBTCxFQUFPLENBQUEsR0FBRSxDQUFULEVBQXZCOztNQUNBLElBQUcsQ0FBQSxDQUFBLElBQUcsRUFBSCxJQUFHLEVBQUgsR0FBTSxDQUFOLENBQUg7QUFBZ0IsZUFBTyxDQUFDLENBQUEsR0FBRSxDQUFILEVBQUssQ0FBTCxFQUFPLENBQUEsR0FBRSxDQUFULEVBQXZCOztJQVhRLENBckJWO0lBa0NBLHNCQUFBLEVBQXdCLFVBQUE7QUFDdEIsVUFBQTtNQUFBLENBQUEsR0FBSSxJQUFDLENBQUEsSUFBSyxDQUFBLE9BQUE7TUFDVixLQUFBLEdBQVEsTUFBQSxHQUFPLENBQUMsQ0FBQyxHQUFULEdBQWEsR0FBYixHQUFnQixDQUFDLENBQUMsS0FBbEIsR0FBd0IsR0FBeEIsR0FBMkIsQ0FBQyxDQUFDLElBQTdCLEdBQWtDO0FBRTFDLGFBQUEsSUFBQTtRQUNFLE1BQU07TUFEUjtJQUpzQixDQWxDeEI7SUEwQ0Esa0JBQUEsRUFBb0IsVUFBQTtBQUNsQixVQUFBO01BQUEsSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQUE7QUFDUCxhQUFBLElBQUE7UUFDRSxJQUFBLElBQVEsSUFBQyxDQUFBO1FBQ1QsSUFBQSxHQUFPLElBQUEsR0FBTyxZQUFDLE9BQU0sRUFBUDtRQUNkLEdBQUEsR0FBTSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsRUFBZSxDQUFmLEVBQWlCLENBQWpCO1FBQ04sQ0FBQSxjQUFJLENBQUMsR0FBSSxDQUFBLENBQUEsQ0FBSixHQUFPLEdBQVIsSUFBYztRQUNsQixDQUFBLGNBQUksQ0FBQyxHQUFJLENBQUEsQ0FBQSxDQUFKLEdBQU8sR0FBUixJQUFjO1FBQ2xCLENBQUEsY0FBSSxDQUFDLEdBQUksQ0FBQSxDQUFBLENBQUosR0FBTyxHQUFSLElBQWM7UUFFbEIsTUFBTSxDQUFBLE1BQUEsR0FBTyxDQUFQLEdBQVMsR0FBVCxHQUFZLENBQVosR0FBYyxHQUFkLEdBQWlCLENBQWpCLEdBQW1CLEdBQW5CO01BUlI7SUFGa0IsQ0ExQ3BCO0lBdURBLHlCQUFBLEVBQTJCLFVBQUMsTUFBRCxFQUFTLGFBQVQ7QUFDekIsVUFBQTtNQUFBLEtBQUEsR0FBUSxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsTUFBbEIsRUFBMEIsYUFBMUI7QUFDUixhQUFBLElBQUE7UUFDRSxNQUFNO01BRFI7SUFGeUIsQ0F2RDNCO0lBNkRBLGdCQUFBLEVBQWtCLFNBQUMsTUFBRCxFQUFTLGFBQVQ7QUFDaEIsVUFBQTtNQUFBLEtBQUEsR0FBUSxNQUFNLENBQUMsa0JBQVAsQ0FBQTtNQUNSLEtBQUEsR0FBUSxLQUFLLENBQUMsUUFBTixDQUFBLENBQWdCLENBQUMsT0FBakIsQ0FBeUIsS0FBekIsRUFBZ0MsV0FBaEM7QUFFUjtRQUNFLEVBQUEsR0FBSyxhQUFhLENBQUMsYUFBZCxDQUE0QixLQUE1QixFQURQO09BQUEsY0FBQTtRQUVNO1FBQ0oscUJBSEY7O01BS0EsSUFBRyxFQUFIO2VBQ0UsZ0JBQUEsQ0FBaUIsRUFBakIsQ0FBb0IsQ0FBQyxNQUR2QjtPQUFBLE1BQUE7ZUFHRSxxQkFIRjs7SUFUZ0IsQ0E3RGxCO0lBMkVBLGNBQUEsRUFBZ0IsU0FBQyxNQUFELEVBQVMsYUFBVDtBQUNkLFVBQUE7TUFBQSxTQUFBLEdBQVksSUFBQyxDQUFBLElBQUssQ0FBQSxNQUFBO01BQ2xCLElBQUksU0FBQSxLQUFhLFFBQWpCO0FBQ0UsZUFBTyxJQUFDLENBQUEsa0JBQUQsQ0FBQSxFQURUO09BQUEsTUFFSyxJQUFHLFNBQUEsS0FBYSxPQUFoQjtlQUNILElBQUMsQ0FBQSxzQkFBRCxDQUFBLEVBREc7T0FBQSxNQUFBO2VBR0gsSUFBQyxDQUFBLHlCQUFELENBQTJCLE1BQTNCLEVBQW1DLGFBQW5DLEVBSEc7O0lBSlMsQ0EzRWhCOztBQUhGIiwic291cmNlc0NvbnRlbnQiOlsie0NvbXBvc2l0ZURpc3Bvc2FibGV9ID0gcmVxdWlyZSBcImF0b21cIlxuXG5tb2R1bGUuZXhwb3J0cyA9XG4gIHN1YnNjcmlwdGlvbnM6IG51bGxcbiAgY29uZjogW11cbiAgZ29sZGVuX3JhdGlvX2Nvbmp1Z2F0ZTogMC42MTgwMzM5ODg3NDk4OTVcblxuICBpbml0OiAtPlxuICAgIEBpbml0Q29uZmlnU3Vic2NyaWJlcnMoKVxuXG4gIGRpc2FibGU6IC0+XG4gICAgQHN1YnNjcmlwdGlvbnM/LmRpc3Bvc2UoKVxuXG4gIG9ic2VydmU6IChrZXkpIC0+XG4gICAgQHN1YnNjcmlwdGlvbnMuYWRkIGF0b20uY29uZmlnLm9ic2VydmUoXG4gICAgICBcImFjdGl2YXRlLXBvd2VyLW1vZGUucGFydGljbGVzLmNvbG91cnMuI3trZXl9XCIsICh2YWx1ZSkgPT5cbiAgICAgICAgQGNvbmZba2V5XSA9IHZhbHVlXG4gICAgKVxuXG4gIGluaXRDb25maWdTdWJzY3JpYmVyczogLT5cbiAgICBAc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlXG4gICAgQG9ic2VydmUgJ3R5cGUnXG4gICAgQG9ic2VydmUgJ2ZpeGVkJ1xuXG4gIGhzdlRvUmdiOiAoaCxzLHYpIC0+ICMgSFNWIHRvIFJHQiBhbGdvcml0aG0sIGFzIHBlciB3aWtpcGVkaWFcbiAgICBjID0gdiAqIHNcbiAgICBoMiA9ICgzNjAuMCpoKSAvNjAuMCAjIEFjY29yZGluZyB0byB3aWtpcGVkaWEsIDA8aDwzNjAuLi5cbiAgICBoMyA9IE1hdGguYWJzKChoMiUyKSAtIDEuMClcbiAgICB4ID0gYyAqICgxLjAgLSBoMylcbiAgICBtID0gdiAtIGNcbiAgICBpZiAwPD1oMjwxIHRoZW4gcmV0dXJuIFtjK20seCttLG1dXG4gICAgaWYgMTw9aDI8MiB0aGVuIHJldHVybiBbeCttLGMrbSxtXVxuICAgIGlmIDI8PWgyPDMgdGhlbiByZXR1cm4gW20sYyttLHgrbV1cbiAgICBpZiAzPD1oMjw0IHRoZW4gcmV0dXJuIFttLHgrbSxjK21dXG4gICAgaWYgNDw9aDI8NSB0aGVuIHJldHVybiBbeCttLG0sYyttXVxuICAgIGlmIDU8PWgyPDYgdGhlbiByZXR1cm4gW2MrbSxtLHgrbV1cblxuICBnZXRGaXhlZENvbG9yR2VuZXJhdG9yOiAtPlxuICAgIGMgPSBAY29uZlsnZml4ZWQnXVxuICAgIGNvbG9yID0gXCJyZ2IoI3tjLnJlZH0sI3tjLmdyZWVufSwje2MuYmx1ZX0pXCJcblxuICAgIGxvb3BcbiAgICAgIHlpZWxkIGNvbG9yXG4gICAgcmV0dXJuXG5cbiAgZ2V0UmFuZG9tR2VuZXJhdG9yOiAtPlxuICAgIHNlZWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgbG9vcFxuICAgICAgc2VlZCArPSBAZ29sZGVuX3JhdGlvX2Nvbmp1Z2F0ZVxuICAgICAgc2VlZCA9IHNlZWQgLSAoc2VlZC8vMSlcbiAgICAgIHJnYiA9IEBoc3ZUb1JnYihzZWVkLDEsMSlcbiAgICAgIHIgPSAocmdiWzBdKjI1NSkvLzFcbiAgICAgIGcgPSAocmdiWzFdKjI1NSkvLzFcbiAgICAgIGIgPSAocmdiWzJdKjI1NSkvLzFcblxuICAgICAgeWllbGQgXCJyZ2IoI3tyfSwje2d9LCN7Yn0pXCJcbiAgICByZXR1cm5cblxuICBnZXRDb2xvckF0Q3Vyc29yR2VuZXJhdG9yOiAoY3Vyc29yLCBlZGl0b3JFbGVtZW50KSAtPlxuICAgIGNvbG9yID0gQGdldENvbG9yQXRDdXJzb3IgY3Vyc29yLCBlZGl0b3JFbGVtZW50XG4gICAgbG9vcFxuICAgICAgeWllbGQgY29sb3JcbiAgICByZXR1cm5cblxuICBnZXRDb2xvckF0Q3Vyc29yOiAoY3Vyc29yLCBlZGl0b3JFbGVtZW50KSAtPlxuICAgIHNjb3BlID0gY3Vyc29yLmdldFNjb3BlRGVzY3JpcHRvcigpXG4gICAgc2NvcGUgPSBzY29wZS50b1N0cmluZygpLnJlcGxhY2UoL1xcLi9nLCAnLnN5bnRheC0tJylcblxuICAgIHRyeVxuICAgICAgZWwgPSBlZGl0b3JFbGVtZW50LnF1ZXJ5U2VsZWN0b3Igc2NvcGVcbiAgICBjYXRjaCBlcnJvclxuICAgICAgXCJyZ2IoMjU1LCAyNTUsIDI1NSlcIlxuXG4gICAgaWYgZWxcbiAgICAgIGdldENvbXB1dGVkU3R5bGUoZWwpLmNvbG9yXG4gICAgZWxzZVxuICAgICAgXCJyZ2IoMjU1LCAyNTUsIDI1NSlcIlxuXG4gIGdlbmVyYXRlQ29sb3JzOiAoY3Vyc29yLCBlZGl0b3JFbGVtZW50KSAtPlxuICAgIGNvbG9yVHlwZSA9IEBjb25mWyd0eXBlJ11cbiAgICBpZiAoY29sb3JUeXBlID09ICdyYW5kb20nKVxuICAgICAgcmV0dXJuIEBnZXRSYW5kb21HZW5lcmF0b3IoKVxuICAgIGVsc2UgaWYgY29sb3JUeXBlID09ICdmaXhlZCdcbiAgICAgIEBnZXRGaXhlZENvbG9yR2VuZXJhdG9yKClcbiAgICBlbHNlXG4gICAgICBAZ2V0Q29sb3JBdEN1cnNvckdlbmVyYXRvciBjdXJzb3IsIGVkaXRvckVsZW1lbnRcbiJdfQ==
